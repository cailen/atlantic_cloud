---
- debug:
    msg: "{{item}}"
  with_items: 
    - "{{builds}}"

- name: "Atlantic_Net Cloud - Creating servers"
  atlantic_cloud:
      state: present
      public_key: "{{ public_key }}"
      private_key: "{{ private_key }}"
      servername: "{{ item.servername }}"
      vm_location: "{{ datacenter }}"
      imageid: "{{ item.imageid }}"
      planname: "{{ item.planname }}"
      ssh_key: "{{ ssh_key }}"
  with_items: "{{ builds }}"
  register: cloudserver

- debug:
    msg: "{{item}}"
  with_nested:
    - "{{cloudserver}}"
    - results

# - name: Adding the new host to the dynamic host file
#   add_host:
#     name: "{{ cloudserver.results.ip_address }}"
#     groups: "cloud_{{build_type}}"
#     when: (build_type != "firewall") and (imageid != "ubuntu-16.04_64bit") 

# - name: Adding the new host to the dynamic host file
#   add_host:
#     name: "{{ cloudserver.results.ip_address }}"
#     ansible_python_interpreter: /usr/bin/python3
#     groups: "cloud_{{build_type}}"
#   when: os == "ubuntu-16.04_64bit"

# - name: Adding the new host to the dynamic host file
#   add_host:
#     name: "{{ cloudserver.results.ip_address }}"
#     ansible_python_interpreter: /usr/local/bin/python2.7
#     ansible_ssh_pass: "Nrprocks!"
#     groups: "cloud_{{build_type}}"
#   when: build_type == "firewall"

# - set_fact:
#     gateway: "{{cloudserver.results.vm_ip_gateway}}"
#     cidr: "{{ '{{ cloudserver.results.vm_ip_address }}/{{ cloudserver.results.vm_ip_subnet }}' | ipaddr('prefix') }}"
#     ip_address: "{{ cloudserver.results.vm_ip_address}}"
#   when: build_type == "firewall"

# - name: Sending info to file
#   template: src=/etc/ansible/templates/new_cloudserver.j2 dest=/etc/ansible/{{cloudserver.results.vm_description}}_details owner=root group=root mode=644

# - name: Waiting for server to come online...
#   local_action:
#     module: wait_for
#       host={{ cloudserver.results.ip_address }}
#       port=22
#       delay=20
#       timeout=300
