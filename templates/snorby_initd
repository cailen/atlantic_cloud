#!/bin/sh
#
# snorby         Start/Stop the snorby daemon.
# April 13, 2010 -- andres.hans  <andre...@gmail.com>
#  -initial version
#
# chkconfig: 2345 90 60
# description: Snorby, snort frontend

### BEGIN INIT INFO
# Provides: snorby
# Required-Start: $local_fs $mysqld
# Required-Stop:
# Default-Start:  2345
# Default-Stop: 90
# Short-Description: run snorby daemon
# Description: Snorby, snort frontend
### END INIT INFO

RETVAL=0
prog="snorby"
exec="/usr/bin/ruby"
params="rails server -e production -d"
lockfile=/var/lock/subsys/snorby
#change this to your snorby installation
directory="/opt/snorby"
config=$directory/config/database.yml
pid=$directory/tmp/pids/server.pid

# Source function library.
. /etc/rc.d/init.d/functions

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

start() {
    [ -x $exec ] || exit 5
    [ -f $config ] || exit 6
    echo -n $"Starting $prog: "
    cd $directory
#    daemon $exec $params && success || failure
    rails r "Snorby::Worker.start"
    daemon $params && success || failure
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
        if [ -n "`cat $pid`" ]; then
                killproc $exec
                RETVAL=3
        else
                failure $"Stopping $prog"
        fi
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile && rm -f $pid
    return $retval
}

restart() {
    stop
    start
}

reload() {
        echo "Not Implemented"
        retval=$?
        echo
}

force_reload() {
        # new configuration takes effect after restart
    restart
}

rh_status() {
    # run checks to determine if the service is running or use generic
status
    status -p $pid $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-
restart|reload|force-reload}"
        exit 2
esac
exit $?